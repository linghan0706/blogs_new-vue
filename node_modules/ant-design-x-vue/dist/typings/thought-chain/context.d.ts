import { type ComputedRef } from "vue";
import type { ThoughtChainNodeContextProps } from "./interface";
export declare const globalThoughtChainNodeContextApi: import("vue").ShallowRef<ThoughtChainNodeContextProps, ThoughtChainNodeContextProps>;
export declare const useThoughtChainNodeContextProvider: (value: ComputedRef<ThoughtChainNodeContextProps>) => void;
export declare const useThoughtChainNodeContextInject: () => ComputedRef<ThoughtChainNodeContextProps>;
export declare const ThoughtChainNodeContextProvider: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    value: {
        type: import("vue").PropType<ThoughtChainNodeContextProps>;
        default: ThoughtChainNodeContextProps;
    };
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: import("vue").PropType<ThoughtChainNodeContextProps>;
        default: ThoughtChainNodeContextProps;
    };
}>> & Readonly<{}>, {
    value: ThoughtChainNodeContextProps;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ThoughtChainNodeContextProvider;
