import ClearButton from './components/ClearButton.vue';
import LoadingButton from './components/LoadingButton.vue';
import SendButton from './components/SendButton.vue';
import type { SenderProps } from './interface';
import { type VNode } from 'vue';
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        header?(): VNode;
        prefix?(): VNode;
        actions?(props?: {
            ori?: VNode;
            info?: {
                components: {
                    SendButton: typeof SendButton;
                    ClearButton: typeof ClearButton;
                    LoadingButton: typeof LoadingButton;
                };
            };
        }): VNode;
    }> & {
        header?(): VNode;
        prefix?(): VNode;
        actions?(props?: {
            ori?: VNode;
            info?: {
                components: {
                    SendButton: typeof SendButton;
                    ClearButton: typeof ClearButton;
                    LoadingButton: typeof LoadingButton;
                };
            };
        }): VNode;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import("vue").DefineComponent<SenderProps, {
    nativeElement: HTMLDivElement;
    focus: (opt: any) => any;
    blur: () => any;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:value": (value: string) => any;
}, string, import("vue").PublicProps, Readonly<SenderProps> & Readonly<{
    "onUpdate:value"?: (value: string) => any;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
