import type { PlaceholderProps } from './interface';
declare const _default: import("vue").DefineComponent<PlaceholderProps, {
    nativeElement: Readonly<import("vue").ShallowRef<import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
        capture: {
            type: import("vue").PropType<boolean | "user" | "environment">;
            default: boolean | "user" | "environment";
        };
        type: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadType>;
            default: import("ant-design-vue/es/upload/interface").UploadType;
        };
        name: StringConstructor;
        defaultFileList: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadFile<any>[]>;
            default: import("ant-design-vue").UploadFile<any>[];
        };
        fileList: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadFile<any>[]>;
            default: import("ant-design-vue").UploadFile<any>[];
        };
        action: {
            type: import("vue").PropType<string | ((file: import("ant-design-vue/es/upload/interface").FileType) => string) | ((file: import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>)>;
            default: string | ((file: import("ant-design-vue/es/upload/interface").FileType) => string) | ((file: import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>);
        };
        directory: {
            type: BooleanConstructor;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<Record<string, unknown> | ((file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => Record<string, unknown> | Promise<Record<string, unknown>>)>;
            default: Record<string, unknown> | ((file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => Record<string, unknown> | Promise<Record<string, unknown>>);
        };
        method: {
            type: import("vue").PropType<"post" | "POST" | "PUT" | "PATCH" | "put" | "patch">;
            default: "post" | "POST" | "PUT" | "PATCH" | "put" | "patch";
        };
        headers: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").HttpRequestHeader>;
            default: import("ant-design-vue/es/upload/interface").HttpRequestHeader;
        };
        showUploadList: {
            type: import("vue").PropType<boolean | import("ant-design-vue/es/upload/interface").ShowUploadListInterface>;
            default: boolean | import("ant-design-vue/es/upload/interface").ShowUploadListInterface;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        accept: StringConstructor;
        beforeUpload: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").FileType, FileList: import("ant-design-vue/es/upload/interface").FileType[]) => (string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType) | Promise<string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType>>;
            default: (file: import("ant-design-vue/es/upload/interface").FileType, FileList: import("ant-design-vue/es/upload/interface").FileType[]) => (string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType) | Promise<string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType>;
        };
        onChange: {
            type: import("vue").PropType<(info: import("ant-design-vue/es/upload/interface").UploadChangeParam<import("ant-design-vue/es/upload/interface").UploadFile<any>>) => void>;
            default: (info: import("ant-design-vue").UploadChangeParam<import("ant-design-vue").UploadFile<any>>) => void;
        };
        'onUpdate:fileList': {
            type: import("vue").PropType<(fileList: import("ant-design-vue/es/upload/interface").UploadFile<any>[]) => void>;
            default: (fileList: import("ant-design-vue").UploadFile<any>[]) => void;
        };
        onDrop: {
            type: import("vue").PropType<(event: DragEvent) => void>;
            default: (event: DragEvent) => void;
        };
        listType: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadListType>;
            default: import("ant-design-vue/es/upload/interface").UploadListType;
        };
        onPreview: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => void>;
            default: (file: import("ant-design-vue").UploadFile<any>) => void;
        };
        onDownload: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => void>;
            default: (file: import("ant-design-vue").UploadFile<any>) => void;
        };
        onReject: {
            type: import("vue").PropType<(fileList: import("ant-design-vue/es/upload/interface").FileType[]) => void>;
            default: (fileList: import("ant-design-vue/es/upload/interface").FileType[]) => void;
        };
        onRemove: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => boolean | void | Promise<boolean | void>>;
            default: (file: import("ant-design-vue").UploadFile<any>) => boolean | void | Promise<boolean | void>;
        };
        remove: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => boolean | void | Promise<boolean | void>>;
            default: (file: import("ant-design-vue").UploadFile<any>) => boolean | void | Promise<boolean | void>;
        };
        supportServerRender: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        prefixCls: StringConstructor;
        customRequest: {
            type: import("vue").PropType<(options: import("ant-design-vue/es/vc-upload/interface").UploadRequestOption<any>) => void>;
            default: (options: import("ant-design-vue/es/vc-upload/interface").UploadRequestOption<any>) => void;
        };
        withCredentials: {
            type: BooleanConstructor;
            default: boolean;
        };
        openFileDialogOnClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        locale: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadLocale>;
            default: import("ant-design-vue/es/upload/interface").UploadLocale;
        };
        id: StringConstructor;
        previewFile: {
            type: import("vue").PropType<(file: Blob | import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>>;
            default: (file: Blob | import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>;
        };
        transformFile: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").FileType) => string | Blob | import("ant-design-vue/es/upload/interface").FileType | PromiseLike<string | Blob | import("ant-design-vue/es/upload/interface").FileType>>;
            default: (file: import("ant-design-vue/es/upload/interface").FileType) => string | Blob | import("ant-design-vue/es/upload/interface").FileType | PromiseLike<string | Blob | import("ant-design-vue/es/upload/interface").FileType>;
        };
        iconRender: {
            type: import("vue").PropType<(opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
                listType?: import("ant-design-vue/es/upload/interface").UploadListType;
            }) => import("ant-design-vue/es/_util/type").VueNode>;
            default: (opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
                listType?: import("ant-design-vue/es/upload/interface").UploadListType;
            }) => import("ant-design-vue/es/_util/type").VueNode;
        };
        isImageUrl: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => boolean>;
            default: (file: import("ant-design-vue").UploadFile<any>) => boolean;
        };
        progress: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadListProgressProps>;
            default: import("ant-design-vue/es/upload/interface").UploadListProgressProps;
        };
        itemRender: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").ItemRender<any>>;
            default: import("ant-design-vue/es/upload/interface").ItemRender<any>;
        };
        maxCount: NumberConstructor;
        height: {
            type: import("vue").PropType<unknown>;
            default: unknown;
        };
        removeIcon: {
            type: import("vue").PropType<(opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode>;
            default: (opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode;
        };
        downloadIcon: {
            type: import("vue").PropType<(opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode>;
            default: (opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode;
        };
        previewIcon: {
            type: import("vue").PropType<(opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode>;
            default: (opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode;
        };
    }>> & Readonly<{}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
        progress: import("ant-design-vue/es/upload/interface").UploadListProgressProps;
        type: import("ant-design-vue/es/upload/interface").UploadType;
        height: unknown;
        data: Record<string, unknown> | ((file: import("ant-design-vue").UploadFile<any>) => Record<string, unknown> | Promise<Record<string, unknown>>);
        onDrop: (event: DragEvent) => void;
        onChange: (info: import("ant-design-vue").UploadChangeParam<import("ant-design-vue").UploadFile<any>>) => void;
        multiple: boolean;
        disabled: boolean;
        method: "post" | "POST" | "PUT" | "PATCH" | "put" | "patch";
        remove: (file: import("ant-design-vue").UploadFile<any>) => boolean | void | Promise<boolean | void>;
        locale: import("ant-design-vue/es/upload/interface").UploadLocale;
        action: string | ((file: import("ant-design-vue/es/upload/interface").FileType) => string) | ((file: import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>);
        capture: boolean | "user" | "environment";
        iconRender: (opt: {
            file: import("ant-design-vue").UploadFile<any>;
            listType?: import("ant-design-vue/es/upload/interface").UploadListType;
        }) => import("ant-design-vue/es/_util/type").VueNode;
        onRemove: (file: import("ant-design-vue").UploadFile<any>) => boolean | void | Promise<boolean | void>;
        removeIcon: (opt: {
            file: import("ant-design-vue").UploadFile<any>;
        }) => import("ant-design-vue/es/_util/type").VueNode;
        itemRender: import("ant-design-vue/es/upload/interface").ItemRender<any>;
        directory: boolean;
        headers: import("ant-design-vue/es/upload/interface").HttpRequestHeader;
        onReject: (fileList: import("ant-design-vue/es/upload/interface").FileType[]) => void;
        beforeUpload: (file: import("ant-design-vue/es/upload/interface").FileType, FileList: import("ant-design-vue/es/upload/interface").FileType[]) => (string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType) | Promise<string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType>;
        customRequest: (options: import("ant-design-vue/es/vc-upload/interface").UploadRequestOption<any>) => void;
        withCredentials: boolean;
        openFileDialogOnClick: boolean;
        fileList: import("ant-design-vue").UploadFile<any>[];
        defaultFileList: import("ant-design-vue").UploadFile<any>[];
        showUploadList: boolean | import("ant-design-vue/es/upload/interface").ShowUploadListInterface;
        'onUpdate:fileList': (fileList: import("ant-design-vue").UploadFile<any>[]) => void;
        listType: import("ant-design-vue/es/upload/interface").UploadListType;
        onPreview: (file: import("ant-design-vue").UploadFile<any>) => void;
        onDownload: (file: import("ant-design-vue").UploadFile<any>) => void;
        supportServerRender: boolean;
        previewFile: (file: Blob | import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>;
        transformFile: (file: import("ant-design-vue/es/upload/interface").FileType) => string | Blob | import("ant-design-vue/es/upload/interface").FileType | PromiseLike<string | Blob | import("ant-design-vue/es/upload/interface").FileType>;
        isImageUrl: (file: import("ant-design-vue").UploadFile<any>) => boolean;
        downloadIcon: (opt: {
            file: import("ant-design-vue").UploadFile<any>;
        }) => import("ant-design-vue/es/_util/type").VueNode;
        previewIcon: (opt: {
            file: import("ant-design-vue").UploadFile<any>;
        }) => import("ant-design-vue/es/_util/type").VueNode;
    }, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        capture: {
            type: import("vue").PropType<boolean | "user" | "environment">;
            default: boolean | "user" | "environment";
        };
        type: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadType>;
            default: import("ant-design-vue/es/upload/interface").UploadType;
        };
        name: StringConstructor;
        defaultFileList: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadFile<any>[]>;
            default: import("ant-design-vue").UploadFile<any>[];
        };
        fileList: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadFile<any>[]>;
            default: import("ant-design-vue").UploadFile<any>[];
        };
        action: {
            type: import("vue").PropType<string | ((file: import("ant-design-vue/es/upload/interface").FileType) => string) | ((file: import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>)>;
            default: string | ((file: import("ant-design-vue/es/upload/interface").FileType) => string) | ((file: import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>);
        };
        directory: {
            type: BooleanConstructor;
            default: boolean;
        };
        data: {
            type: import("vue").PropType<Record<string, unknown> | ((file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => Record<string, unknown> | Promise<Record<string, unknown>>)>;
            default: Record<string, unknown> | ((file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => Record<string, unknown> | Promise<Record<string, unknown>>);
        };
        method: {
            type: import("vue").PropType<"post" | "POST" | "PUT" | "PATCH" | "put" | "patch">;
            default: "post" | "POST" | "PUT" | "PATCH" | "put" | "patch";
        };
        headers: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").HttpRequestHeader>;
            default: import("ant-design-vue/es/upload/interface").HttpRequestHeader;
        };
        showUploadList: {
            type: import("vue").PropType<boolean | import("ant-design-vue/es/upload/interface").ShowUploadListInterface>;
            default: boolean | import("ant-design-vue/es/upload/interface").ShowUploadListInterface;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        accept: StringConstructor;
        beforeUpload: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").FileType, FileList: import("ant-design-vue/es/upload/interface").FileType[]) => (string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType) | Promise<string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType>>;
            default: (file: import("ant-design-vue/es/upload/interface").FileType, FileList: import("ant-design-vue/es/upload/interface").FileType[]) => (string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType) | Promise<string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType>;
        };
        onChange: {
            type: import("vue").PropType<(info: import("ant-design-vue/es/upload/interface").UploadChangeParam<import("ant-design-vue/es/upload/interface").UploadFile<any>>) => void>;
            default: (info: import("ant-design-vue").UploadChangeParam<import("ant-design-vue").UploadFile<any>>) => void;
        };
        'onUpdate:fileList': {
            type: import("vue").PropType<(fileList: import("ant-design-vue/es/upload/interface").UploadFile<any>[]) => void>;
            default: (fileList: import("ant-design-vue").UploadFile<any>[]) => void;
        };
        onDrop: {
            type: import("vue").PropType<(event: DragEvent) => void>;
            default: (event: DragEvent) => void;
        };
        listType: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadListType>;
            default: import("ant-design-vue/es/upload/interface").UploadListType;
        };
        onPreview: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => void>;
            default: (file: import("ant-design-vue").UploadFile<any>) => void;
        };
        onDownload: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => void>;
            default: (file: import("ant-design-vue").UploadFile<any>) => void;
        };
        onReject: {
            type: import("vue").PropType<(fileList: import("ant-design-vue/es/upload/interface").FileType[]) => void>;
            default: (fileList: import("ant-design-vue/es/upload/interface").FileType[]) => void;
        };
        onRemove: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => boolean | void | Promise<boolean | void>>;
            default: (file: import("ant-design-vue").UploadFile<any>) => boolean | void | Promise<boolean | void>;
        };
        remove: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => boolean | void | Promise<boolean | void>>;
            default: (file: import("ant-design-vue").UploadFile<any>) => boolean | void | Promise<boolean | void>;
        };
        supportServerRender: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        prefixCls: StringConstructor;
        customRequest: {
            type: import("vue").PropType<(options: import("ant-design-vue/es/vc-upload/interface").UploadRequestOption<any>) => void>;
            default: (options: import("ant-design-vue/es/vc-upload/interface").UploadRequestOption<any>) => void;
        };
        withCredentials: {
            type: BooleanConstructor;
            default: boolean;
        };
        openFileDialogOnClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        locale: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadLocale>;
            default: import("ant-design-vue/es/upload/interface").UploadLocale;
        };
        id: StringConstructor;
        previewFile: {
            type: import("vue").PropType<(file: Blob | import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>>;
            default: (file: Blob | import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>;
        };
        transformFile: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").FileType) => string | Blob | import("ant-design-vue/es/upload/interface").FileType | PromiseLike<string | Blob | import("ant-design-vue/es/upload/interface").FileType>>;
            default: (file: import("ant-design-vue/es/upload/interface").FileType) => string | Blob | import("ant-design-vue/es/upload/interface").FileType | PromiseLike<string | Blob | import("ant-design-vue/es/upload/interface").FileType>;
        };
        iconRender: {
            type: import("vue").PropType<(opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
                listType?: import("ant-design-vue/es/upload/interface").UploadListType;
            }) => import("ant-design-vue/es/_util/type").VueNode>;
            default: (opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
                listType?: import("ant-design-vue/es/upload/interface").UploadListType;
            }) => import("ant-design-vue/es/_util/type").VueNode;
        };
        isImageUrl: {
            type: import("vue").PropType<(file: import("ant-design-vue/es/upload/interface").UploadFile<any>) => boolean>;
            default: (file: import("ant-design-vue").UploadFile<any>) => boolean;
        };
        progress: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").UploadListProgressProps>;
            default: import("ant-design-vue/es/upload/interface").UploadListProgressProps;
        };
        itemRender: {
            type: import("vue").PropType<import("ant-design-vue/es/upload/interface").ItemRender<any>>;
            default: import("ant-design-vue/es/upload/interface").ItemRender<any>;
        };
        maxCount: NumberConstructor;
        height: {
            type: import("vue").PropType<unknown>;
            default: unknown;
        };
        removeIcon: {
            type: import("vue").PropType<(opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode>;
            default: (opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode;
        };
        downloadIcon: {
            type: import("vue").PropType<(opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode>;
            default: (opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode;
        };
        previewIcon: {
            type: import("vue").PropType<(opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode>;
            default: (opt: {
                file: import("ant-design-vue/es/upload/interface").UploadFile<any>;
            }) => import("ant-design-vue/es/_util/type").VueNode;
        };
    }>> & Readonly<{}>, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, {
        progress: import("ant-design-vue/es/upload/interface").UploadListProgressProps;
        type: import("ant-design-vue/es/upload/interface").UploadType;
        height: unknown;
        data: Record<string, unknown> | ((file: import("ant-design-vue").UploadFile<any>) => Record<string, unknown> | Promise<Record<string, unknown>>);
        onDrop: (event: DragEvent) => void;
        onChange: (info: import("ant-design-vue").UploadChangeParam<import("ant-design-vue").UploadFile<any>>) => void;
        multiple: boolean;
        disabled: boolean;
        method: "post" | "POST" | "PUT" | "PATCH" | "put" | "patch";
        remove: (file: import("ant-design-vue").UploadFile<any>) => boolean | void | Promise<boolean | void>;
        locale: import("ant-design-vue/es/upload/interface").UploadLocale;
        action: string | ((file: import("ant-design-vue/es/upload/interface").FileType) => string) | ((file: import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>);
        capture: boolean | "user" | "environment";
        iconRender: (opt: {
            file: import("ant-design-vue").UploadFile<any>;
            listType?: import("ant-design-vue/es/upload/interface").UploadListType;
        }) => import("ant-design-vue/es/_util/type").VueNode;
        onRemove: (file: import("ant-design-vue").UploadFile<any>) => boolean | void | Promise<boolean | void>;
        removeIcon: (opt: {
            file: import("ant-design-vue").UploadFile<any>;
        }) => import("ant-design-vue/es/_util/type").VueNode;
        itemRender: import("ant-design-vue/es/upload/interface").ItemRender<any>;
        directory: boolean;
        headers: import("ant-design-vue/es/upload/interface").HttpRequestHeader;
        onReject: (fileList: import("ant-design-vue/es/upload/interface").FileType[]) => void;
        beforeUpload: (file: import("ant-design-vue/es/upload/interface").FileType, FileList: import("ant-design-vue/es/upload/interface").FileType[]) => (string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType) | Promise<string | boolean | void | Blob | import("ant-design-vue/es/upload/interface").FileType>;
        customRequest: (options: import("ant-design-vue/es/vc-upload/interface").UploadRequestOption<any>) => void;
        withCredentials: boolean;
        openFileDialogOnClick: boolean;
        fileList: import("ant-design-vue").UploadFile<any>[];
        defaultFileList: import("ant-design-vue").UploadFile<any>[];
        showUploadList: boolean | import("ant-design-vue/es/upload/interface").ShowUploadListInterface;
        'onUpdate:fileList': (fileList: import("ant-design-vue").UploadFile<any>[]) => void;
        listType: import("ant-design-vue/es/upload/interface").UploadListType;
        onPreview: (file: import("ant-design-vue").UploadFile<any>) => void;
        onDownload: (file: import("ant-design-vue").UploadFile<any>) => void;
        supportServerRender: boolean;
        previewFile: (file: Blob | import("ant-design-vue/es/upload/interface").FileType) => PromiseLike<string>;
        transformFile: (file: import("ant-design-vue/es/upload/interface").FileType) => string | Blob | import("ant-design-vue/es/upload/interface").FileType | PromiseLike<string | Blob | import("ant-design-vue/es/upload/interface").FileType>;
        isImageUrl: (file: import("ant-design-vue").UploadFile<any>) => boolean;
        downloadIcon: (opt: {
            file: import("ant-design-vue").UploadFile<any>;
        }) => import("ant-design-vue/es/_util/type").VueNode;
        previewIcon: (opt: {
            file: import("ant-design-vue").UploadFile<any>;
        }) => import("ant-design-vue/es/_util/type").VueNode;
    }>>>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<PlaceholderProps> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
export default _default;
