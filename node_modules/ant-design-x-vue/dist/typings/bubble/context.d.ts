import { ComputedRef } from "vue";
import { BubbleContextProps } from "./interface";
export declare const globalBubbleContextApi: import("vue").ShallowRef<BubbleContextProps, BubbleContextProps>;
export declare const useBubbleContextProvider: (value: ComputedRef<BubbleContextProps>) => void;
export declare const useBubbleContextInject: () => ComputedRef<BubbleContextProps>;
export declare const BubbleContextProvider: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    value: {
        type: import("vue").PropType<BubbleContextProps>;
        default: BubbleContextProps;
    };
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: import("vue").PropType<BubbleContextProps>;
        default: BubbleContextProps;
    };
}>> & Readonly<{}>, {
    value: BubbleContextProps;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default BubbleContextProvider;
