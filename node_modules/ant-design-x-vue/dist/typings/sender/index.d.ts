export type { SenderProps } from './interface';
declare const Sender: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("./interface").SenderProps> & Readonly<{
        "onUpdate:value"?: (value: string) => any;
    }>, {
        nativeElement: HTMLDivElement;
        focus: (opt: any) => any;
        blur: () => any;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:value": (value: string) => any;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("./interface").SenderProps> & Readonly<{
        "onUpdate:value"?: (value: string) => any;
    }>, {
        nativeElement: HTMLDivElement;
        focus: (opt: any) => any;
        blur: () => any;
    }, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("./interface").SenderProps> & Readonly<{
    "onUpdate:value"?: (value: string) => any;
}>, {
    nativeElement: HTMLDivElement;
    focus: (opt: any) => any;
    blur: () => any;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:value": (value: string) => any;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Readonly<{
        header?(): import("vue").VNode;
        prefix?(): import("vue").VNode;
        actions?(props?: {
            ori?: import("vue").VNode;
            info?: {
                components: {
                    SendButton: typeof import("./components/SendButton.vue").default;
                    ClearButton: typeof import("./components/ClearButton.vue").default;
                    LoadingButton: typeof import("./components/LoadingButton.vue").default;
                };
            };
        }): import("vue").VNode;
    }> & {
        header?(): import("vue").VNode;
        prefix?(): import("vue").VNode;
        actions?(props?: {
            ori?: import("vue").VNode;
            info?: {
                components: {
                    SendButton: typeof import("./components/SendButton.vue").default;
                    ClearButton: typeof import("./components/ClearButton.vue").default;
                    LoadingButton: typeof import("./components/LoadingButton.vue").default;
                };
            };
        }): import("vue").VNode;
    };
}) & {
    Header: <T = any>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: {
        slots: Readonly<{
            default(props?: any): any;
        }> & {
            default(props?: any): any;
        };
        attrs: any;
        emit: {};
    }, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
        props: {
            forceRender?: boolean;
            open?: boolean;
            onOpenChange?: (open: boolean) => void;
            title?: import("vue").VNode | string;
            children?: import("vue").VNode;
            className?: string;
            style?: import("vue").CSSProperties;
            classNames?: Partial<Record<import("./interface").SemanticType, string>>;
            styles?: Partial<Record<import("./interface").SemanticType, import("vue").CSSProperties>>;
            closable?: boolean;
        } & import("vue").PublicProps;
        expose(exposed: import("vue").ShallowUnwrapRef<{}>): void;
        attrs: any;
        slots: Readonly<{
            default(props?: any): any;
        }> & {
            default(props?: any): any;
        };
        emit: {};
    }>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }> & {
        __ctx?: Awaited<typeof __VLS_setup>;
    };
};
export default Sender;
export { Sender, };
